/* Lexical part */


!whitespace : ' ' | '\t' | '\n' | '\r' ;

!comment : ';' {.} '\n' ;


_digit : '0'-'9' ;

_char : 'a'-'z' | 'A' - 'Z' ;

_symbol_punct_char : '_' | '-' | '+' | '=' | '@' | '#' | '$' | '!' | ':' | '%'
                   | '^' | '*' | '~' | '<' | '>' | '?'
;

_symbol_char : _char | _symbol_punct_char | _digit ;


decimal_number : ['-'] '1'-'9' {_digit}
        | '0';

atomic_symbol : _symbol_char {_symbol_char} ;


_escaped_char : '\\' . ;

quoted_string : '"' {_escaped_char | .} '"' ;



/*******************************************************************************/
/* Syntax Part */

<< import "github.com/agutikov/go-lisp-experiments/lispy/syntax/ast" >>

Sequence : Sexpr                << ast.NewSequence($0) >>
         | Sexpr Sequence       << ast.Cons($0, $1) >>
         ;

Sexpr : BareSexpr
      | QuotedSexpr
      | UnquotedSexpr
      ;

BareSexpr : Atom      << ast.NewSexpr($0) >>
          | List      << ast.NewSexpr($0) >>
          ;

QuotedSexpr : "'" BareSexpr      << ast.NewQuote($1) >>
            | "(" "quote" BareSexpr ")" << ast.NewQuote($2) >>
            ;

UnquotedSexpr : "," BareSexpr     << ast.NewUnquote($1) >>
              ;

List : "(" Sequence ")"  << ast.NewList($1) >>
     | "(" ")"           << ast.NewList(nil) >>
     ;

Atom : atomic_symbol      << ast.NewSymbol($0) >>
     | decimal_number     << ast.NewNumber($0) >>
     | quoted_string      << ast.NewStr($0) >>
     | "nil"              << ast.Nil{}, nil >>
     ;




