/* Lexical part */


!whitespace : ' ' | '\t' | '\n' | '\r' ;

!comment : ';' {.} '\n' ;


_digit : '0'-'9' ;

_char : 'a'-'z' | 'A' - 'Z' ;

_symbol_punct_char : '_' | '-' | '+' | '=' | '@' | '#' | '$' | '!' | ':' | '%'
                   | '^' | '*' | '~' | '<' | '>' | '?' | '/'
                   ;

_symbol_char : _char | _symbol_punct_char | _digit ;


_decimal_number : '1'-'9' {_digit} | '0' ;

integer_number : ['-'] _decimal_number ;

float_number : ['-'] _decimal_number '.' {_digit} ;



atomic_symbol : _symbol_char {_symbol_char} ;


_escaped_char : '\\' . ;

quoted_string : '"' {_escaped_char | .} '"' ;


/*******************************************************************************/
/* Syntax Part */

<< import "github.com/agutikov/go-lisp-experiments/lispy/syntax/ast" >>

Sequence : Sexpr                << ast.NewSequence($0) >>
         | Sexpr Sequence       << ast.Cons($0, $1) >>
         ;

Sexpr : BareSexpr
      | QuotedSexpr
      | UnquotedSexpr
      ;

BareSexpr : Atom
          | List
          | If
          | Define
          | Lambda
          | Set
          | Defun
          ;

QuotedSexpr : "'" BareSexpr      << ast.NewQuote($1) >>
            | "(" "quote" BareSexpr ")" << ast.NewQuote($2) >>
            ;

UnquotedSexpr : "," BareSexpr     << ast.NewUnquote($1) >>
              ;

List : "(" Sequence ")"  << ast.NewList($1) >>
     | "(" ")"           << ast.NewList(nil) >>
     ;

Atom : Symbol
     | Number
     | Str
     | Nil
     | Bool
     ;

Bool : True
     | False
     ;

True : "t"  << ast.Bool(true), nil >> ;
False : "false" << ast.Bool(false), nil >> ;

Symbol : atomic_symbol      << ast.NewSymbol($0) >>
       ;

Number : Int
       | Float
       ;

Int : integer_number     << ast.NewInt($0) >>
    ;

Float : float_number     << ast.NewFloat($0) >>
      ;

Str : quoted_string      << ast.NewStr($0) >>
    ;

Nil :  "nil"              << ast.Nil{}, nil >>
    ;


If : "(" "if" Sexpr Sexpr Sexpr ")"       << ast.NewIf($2, $3, $4) >>
   ;

Define : "(" "define" Symbol Sexpr ")"    << ast.NewDefine($2, $3) >>
       ;

Set : "(" "set!" Symbol Sexpr ")"    << ast.NewSet($2, $3) >>
    ;

Lambda : "(" "lambda" LambdaArgs Sexpr ")"      << ast.NewLambda($2, $3) >>
       ;

Defun : "(" "defun" Symbol LambdaArgs Sexpr ")"  << ast.NewDefun($2, $3, $4) >>
      ;

LambdaArgs : ListOfSymbols
           ;

ListOfSymbols : "(" SequenceOfSymbols ")"       << $1, nil >>
              ;

SequenceOfSymbols : Symbol                      << ast.NewSequence($0) >>
                  | Symbol SequenceOfSymbols    << ast.Cons($0, $1) >>
                  ;




